package funciones

import (
	"fmt"
	"math/big"
)

func CalcularDiffieHellman() {
	fmt.Println("\nüîê Protocolo de Intercambio de Claves Diffie-Hellman")
	fmt.Println("=============================================")

	// Paso 1: Par√°metros p√∫blicos
	fmt.Println("\n1Ô∏è‚É£ Par√°metros p√∫blicos:")
	p := readNumberBig("Ingresa el n√∫mero primo p (m√≥dulo): ")
	g := readNumberBig("Ingresa el generador g: ")

	// Verificar que p sea primo (para proyectos reales, usar pruebas de primalidad m√°s robustas)
	if !p.ProbablyPrime(20) {
		fmt.Println("‚ö†Ô∏è Advertencia: El n√∫mero p ingresado probablemente no es primo.")
		fmt.Println("Para seguridad real, p debe ser un n√∫mero primo grande.")
	}

	// Paso 2: Claves privadas de Alice y Bob
	fmt.Println("\n2Ô∏è‚É£ Claves privadas:")
	fmt.Println("üßë Alice:")
	a := readNumberBig("Ingresa la clave privada de Alice (a): ")

	fmt.Println("\nüë§ Bob:")
	b := readNumberBig("Ingresa la clave privada de Bob (b): ")

	// Paso 3: C√°lculos p√∫blicos
	fmt.Println("\n3Ô∏è‚É£ C√°lculos p√∫blicos (intercambiados en canal inseguro):")

	// Alice calcula A = g^a mod p
	A := new(big.Int).Exp(g, a, p)
	fmt.Printf("üßë Alice env√≠a A = g^a mod p = %d^%d mod %d = %d\n", g, a, p, A)

	// Bob calcula B = g^b mod p
	B := new(big.Int).Exp(g, b, p)
	fmt.Printf("üë§ Bob env√≠a B = g^b mod p = %d^%d mod %d = %d\n", g, b, p, B)

	// Paso 4: C√°lculo de la clave secreta compartida
	fmt.Println("\n4Ô∏è‚É£ C√°lculo de la clave secreta compartida:")

	// Alice calcula s = B^a mod p
	s_alice := new(big.Int).Exp(B, a, p)
	fmt.Printf("üßë Alice calcula s = B^a mod p = %d^%d mod %d = %d\n", B, a, p, s_alice)

	// Bob calcula s = A^b mod p
	s_bob := new(big.Int).Exp(A, b, p)
	fmt.Printf("üë§ Bob calcula s = A^b mod p = %d^%d mod %d = %d\n", A, b, p, s_bob)

	// Verificaci√≥n
	if s_alice.Cmp(s_bob) == 0 {
		fmt.Println("\n‚úÖ √âxito! Ambos llegaron a la misma clave secreta compartida!")
		fmt.Printf("üîë Clave secreta compartida: %d\n", s_alice)
	} else {
		fmt.Println("\n‚ùå Error! Las claves calculadas no coinciden.")
	}

	// Explicaci√≥n del protocolo
	fmt.Println("\nüìö Explicaci√≥n del protocolo Diffie-Hellman:")
	fmt.Println("1. Alice y Bob acuerdan p√∫blicamente un n√∫mero primo p y un generador g.")
	fmt.Println("2. Alice elige secretamente un n√∫mero a, y Bob elige secretamente un n√∫mero b.")
	fmt.Println("3. Alice calcula A = g^a mod p y lo env√≠a a Bob.")
	fmt.Println("4. Bob calcula B = g^b mod p y lo env√≠a a Alice.")
	fmt.Println("5. Alice calcula la clave secreta: s = B^a mod p.")
	fmt.Println("6. Bob calcula la clave secreta: s = A^b mod p.")
	fmt.Println("7. Ambos obtienen la misma clave secreta: s = g^(a*b) mod p.")
	fmt.Println("8. Un atacante que vea p, g, A y B no puede calcular f√°cilmente s debido a la")
	fmt.Println("   dificultad del problema del logaritmo discreto.")
}

// CalcularRSA implementa el algoritmo de cifrado RSA
func CalcularRSA() {
	fmt.Println("\nüîê Algoritmo de Cifrado RSA")
	fmt.Println("=============================================")

	// Paso 1: Generaci√≥n de claves
	fmt.Println("\n1Ô∏è‚É£ Generaci√≥n de claves:")

	// Elegir dos n√∫meros primos
	p := readNumberBig("Ingresa el primer n√∫mero primo (p): ")
	q := readNumberBig("Ingresa el segundo n√∫mero primo (q): ")

	// Verificar que p y q sean primos
	if !p.ProbablyPrime(20) || !q.ProbablyPrime(20) {
		fmt.Println("‚ö†Ô∏è Advertencia: Uno o ambos n√∫meros ingresados probablemente no son primos.")
		fmt.Println("Para seguridad real, p y q deben ser n√∫meros primos grandes y distintos.")
	}

	// Calcular n = p * q
	n := new(big.Int).Mul(p, q)
	fmt.Printf("\nCalculando n = p * q = %d * %d = %d\n", p, q, n)

	// Calcular œÜ(n) = (p-1) * (q-1)
	p_minus_1 := new(big.Int).Sub(p, big.NewInt(1))
	q_minus_1 := new(big.Int).Sub(q, big.NewInt(1))
	phi := new(big.Int).Mul(p_minus_1, q_minus_1)
	fmt.Printf("Calculando œÜ(n) = (p-1) * (q-1) = %d * %d = %d\n", p_minus_1, q_minus_1, phi)

	// Elegir e (exponente p√∫blico)
	e := readNumberBig("Ingresa el exponente p√∫blico e (coprimo con œÜ(n)): ")

	// Verificar que e sea coprimo con œÜ(n)
	if new(big.Int).GCD(nil, nil, e, phi).Cmp(big.NewInt(1)) != 0 {
		fmt.Printf("‚ùå Error: e (%d) debe ser coprimo con œÜ(n) (%d).\n", e, phi)
		return
	}

	// Calcular d (exponente privado): d * e ‚â° 1 (mod œÜ(n))
	d := new(big.Int).ModInverse(e, phi)
	if d == nil {
		fmt.Printf("‚ùå Error: No se puede calcular el inverso multiplicativo de e (%d) m√≥dulo œÜ(n) (%d).\n", e, phi)
		return
	}
	fmt.Printf("Calculando d = e^(-1) mod œÜ(n) = %d^(-1) mod %d = %d\n", e, phi, d)

	// Mostrar claves
	fmt.Println("\nüîë Claves generadas:")
	fmt.Printf("Clave p√∫blica (e, n): (%d, %d)\n", e, n)
	fmt.Printf("Clave privada (d, n): (%d, %d)\n", d, n)

	// Paso 2: Cifrado o Descifrado
	fmt.Println("\n2Ô∏è‚É£ ¬øQu√© deseas hacer?")
	fmt.Println("1. Cifrar un mensaje")
	fmt.Println("2. Descifrar un mensaje")
	opcion := readNumber("Elige una opci√≥n (1-2): ")

	if opcion == 1 {
		// Cifrar
		m := readNumberBig("\nIngresa el mensaje a cifrar (n√∫mero menor que n): ")

		// Verificar que m sea menor que n
		if m.Cmp(n) >= 0 {
			fmt.Printf("‚ùå Error: El mensaje (%d) debe ser menor que n (%d).\n", m, n)
			return
		}

		// Cifrar: c = m^e mod n
		c := new(big.Int).Exp(m, e, n)

		fmt.Printf("\n‚úÖ Proceso de cifrado:")
		fmt.Printf("\nMensaje original (m): %d", m)
		fmt.Printf("\nMensaje cifrado (c) = m^e mod n = %d^%d mod %d = %d\n", m, e, n, c)

	} else if opcion == 2 {
		// Descifrar
		c := readNumberBig("\nIngresa el mensaje cifrado (n√∫mero): ")

		// Descifrar: m = c^d mod n
		m := new(big.Int).Exp(c, d, n)

		fmt.Printf("\n‚úÖ Proceso de descifrado:")
		fmt.Printf("\nMensaje cifrado (c): %d", c)
		fmt.Printf("\nMensaje descifrado (m) = c^d mod n = %d^%d mod %d = %d\n", c, d, n, m)

	} else {
		fmt.Println("‚ùå Opci√≥n no v√°lida.")
	}

	// Explicaci√≥n del algoritmo RSA
	fmt.Println("\nüìö Explicaci√≥n del algoritmo RSA:")
	fmt.Println("1. Generaci√≥n de claves:")
	fmt.Println("   a. Elegir dos n√∫meros primos distintos p y q.")
	fmt.Println("   b. Calcular n = p * q (m√≥dulo para cifrar/descifrar).")
	fmt.Println("   c. Calcular œÜ(n) = (p-1) * (q-1).")
	fmt.Println("   d. Elegir un entero e (1 < e < œÜ(n)) que sea coprimo con œÜ(n).")
	fmt.Println("   e. Calcular d tal que d * e ‚â° 1 (mod œÜ(n)).")
	fmt.Println("   f. La clave p√∫blica es (e, n) y la clave privada es (d, n).")
	fmt.Println("2. Cifrado: c = m^e mod n (donde m es el mensaje original).")
	fmt.Println("3. Descifrado: m = c^d mod n (donde c es el mensaje cifrado).")
}

// CalcularExponenciacionRapida implementa el algoritmo de exponenciaci√≥n modular r√°pida
func CalcularExponenciacionRapida() {
	fmt.Println("\nüîê Algoritmo de Exponenciaci√≥n R√°pida (Exponenciaci√≥n Modular)")
	fmt.Println("=============================================")

	base := readNumberBig("Ingresa la base (b): ")
	exponente := readNumberBig("Ingresa el exponente (e): ")
	modulo := readNumberBig("Ingresa el m√≥dulo (m): ")

	// Calcular b^e mod m usando el m√©todo incorporado en big.Int
	resultado := new(big.Int).Exp(base, exponente, modulo)

	fmt.Printf("\n‚úÖ Resultado: %d^%d mod %d = %d\n", base, exponente, modulo, resultado)

	// Mostrar el proceso paso a paso (implementaci√≥n expl√≠cita para fines educativos)
	fmt.Println("\nüìö Proceso paso a paso con el algoritmo de exponenciaci√≥n r√°pida:")

	// Convertir el exponente a binario para la explicaci√≥n
	fmt.Printf("1. Convertir el exponente %d a binario: %b\n", exponente, exponente)

	// Implementar el algoritmo de exponenciaci√≥n r√°pida manualmente para mostrar los pasos
	res := big.NewInt(1)
	b := new(big.Int).Set(base)
	e := new(big.Int).Set(exponente)
	zero := big.NewInt(0)
	one := big.NewInt(1)
	two := big.NewInt(2)

	fmt.Println("2. Inicializar resultado = 1")
	fmt.Println("3. Proceso iterativo: ")
	paso := 1

	for e.Cmp(zero) > 0 {
		// Si el exponente es impar, multiplicar el resultado por la base
		if new(big.Int).And(e, one).Cmp(one) == 0 {
			old_res := new(big.Int).Set(res)
			res = new(big.Int).Mul(res, b)
			res = new(big.Int).Mod(res, modulo)
			fmt.Printf("   Paso %d: Exponente %d es impar, resultado = resultado * base mod m = %d * %d mod %d = %d\n",
				paso, e, old_res, b, modulo, res)
		} else {
			fmt.Printf("   Paso %d: Exponente %d es par, resultado no cambia = %d\n", paso, e, res)
		}

		// Elevar la base al cuadrado
		old_b := new(big.Int).Set(b)
		b = new(big.Int).Mul(b, b)
		b = new(big.Int).Mod(b, modulo)
		fmt.Printf("   Paso %d (cont.): Actualizar base = base^2 mod m = %d^2 mod %d = %d\n", paso, old_b, modulo, b)

		// Dividir el exponente por 2
		e = new(big.Int).Div(e, two)
		fmt.Printf("   Paso %d (cont.): Dividir exponente por 2: %d\n", paso, e)

		paso++
	}

	fmt.Printf("\n‚úÖ Resultado final: %d\n", res)

	// Explicaci√≥n del algoritmo
	fmt.Println("\nüìù Explicaci√≥n del algoritmo de exponenciaci√≥n r√°pida:")
	fmt.Println("Este algoritmo calcula b^e mod m de forma eficiente con complejidad O(log e).")
	fmt.Println("En lugar de realizar e multiplicaciones, utiliza la representaci√≥n binaria del exponente.")
	fmt.Println("La idea clave es utilizar la propiedad: b^(2k) = (b^k)^2")
	fmt.Println("")
	fmt.Println("El algoritmo funciona as√≠:")
	fmt.Println("1. Inicializar resultado = 1")
	fmt.Println("2. Convertir el exponente a binario")
	fmt.Println("3. Por cada bit del exponente (de derecha a izquierda):")
	fmt.Println("   a. Si el bit es 1, multiplicar el resultado por la base actual")
	fmt.Println("   b. Elevar la base al cuadrado")
	fmt.Println("")
	fmt.Println("Este enfoque es crucial en criptograf√≠a donde se trabaja con exponentes enormes.")
	fmt.Println("Por ejemplo, RSA requiere calcular eficientemente expresiones como m^e mod n,")
	fmt.Println("donde e y n pueden tener cientos o miles de d√≠gitos.")
}
